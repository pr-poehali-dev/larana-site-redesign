import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';
import * as XLSX from 'xlsx';
import { clearProductCache } from '@/utils/productCache';

interface BulkImageImportProps {
  products: any[];
  onProductUpdate: (products: any[]) => void;
  onClose: () => void;
}

const BulkImageImport = ({ products, onProductUpdate, onClose }: BulkImageImportProps) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);
    const reader = new FileReader();

    reader.onload = (event) => {
      try {
        const data = event.target?.result;
        const workbook = XLSX.read(data, { type: 'binary' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const importedData = XLSX.utils.sheet_to_json(worksheet);

        let updatedCount = 0;
        let newImagesCount = 0;

        const updatedProducts = products.map(product => {
          const matchingRow = importedData.find((row: any) => {
            const rowTitle = row['–ù–∞–∑–≤–∞–Ω–∏–µ'] || row['title'] || '';
            const rowArticle = row['–ê—Ä—Ç–∏–∫—É–ª'] || row['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] || row['supplierArticle'] || '';
            
            return rowTitle === product.title || 
                   (rowArticle && rowArticle === product.supplierArticle);
          });

          if (matchingRow) {
            const cleanImageUrl = (url: string) => {
              if (!url) return url;
              
              let cleaned = url.trim();
              
              if (cleaned.endsWith('–†') || cleaned.endsWith('—Ä')) {
                cleaned = cleaned.slice(0, -1).trim();
              }
              
              cleaned = cleaned
                .replace(/\s*[‚ÇΩ‚Ç∏‚Ç¥‚Ç¨$¬£¬•]\s*.*$/, '')
                .replace(/\s+‚ÇΩ.*$/, '')
                .replace(/‚ÇΩ.*$/, '')
                .split(' ')[0]
                .trim();
              
              return cleaned.startsWith('http') ? cleaned : '';
            };

            const newImages: string[] = [];
            
            for (let i = 1; i <= 20; i++) {
              const imageKey = `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i}` || `Image ${i}` || `image${i}`;
              const imageUrl = (matchingRow as any)[imageKey] || (matchingRow as any)[`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i}`];
              
              if (imageUrl) {
                const cleaned = cleanImageUrl(String(imageUrl));
                if (cleaned && !newImages.includes(cleaned)) {
                  newImages.push(cleaned);
                }
              }
            }

            if (newImages.length > 0) {
              updatedCount++;
              
              const existingImages = product.images || [product.image];
              const combinedImages = [...new Set([...existingImages, ...newImages])].filter(url => url && url.startsWith('http'));
              
              newImagesCount += (combinedImages.length - existingImages.length);
              
              return {
                ...product,
                images: combinedImages,
                image: combinedImages[0] || product.image
              };
            }
          }

          return product;
        });

        onProductUpdate(updatedProducts);
        clearProductCache();

        toast({
          title: "‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã",
          description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: ${newImagesCount}`
        });

        setIsProcessing(false);
        onClose();
      } catch (error) {
        console.error('Import error:', error);
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞",
          description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
          variant: "destructive"
        });
        setIsProcessing(false);
      }
    };

    reader.readAsBinaryString(file);
  };

  const downloadTemplate = () => {
    const templateData = products.slice(0, 3).map(p => ({
      '–ù–∞–∑–≤–∞–Ω–∏–µ': p.title,
      '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': p.supplierArticle || '',
      '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1': p.images?.[0] || p.image || '',
      '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2': '',
      '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3': '',
      '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 4': '',
      '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 5': ''
    }));

    const ws = XLSX.utils.json_to_sheet(templateData);
    ws['!cols'] = [
      { wch: 30 },
      { wch: 20 },
      { wch: 60 },
      { wch: 60 },
      { wch: 60 },
      { wch: 60 },
      { wch: 60 }
    ];

    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–ö–∞—Ä—Ç–∏–Ω–∫–∏');
    XLSX.writeFile(wb, '—à–∞–±–ª–æ–Ω_–∏–º–ø–æ—Ä—Ç_–∫–∞—Ä—Ç–∏–Ω–æ–∫.xlsx');

    toast({
      title: "–®–∞–±–ª–æ–Ω —Å–∫–∞—á–∞–Ω",
      description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ"
    });
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-lg">üì∏ –ò–º–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫</CardTitle>
            <CardDescription className="mt-1">
              –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–∞–º
            </CardDescription>
          </div>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <Icon name="X" size={18} />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="bg-blue-50 p-4 rounded-lg space-y-2 text-sm">
          <p className="font-semibold flex items-center gap-2">
            <Icon name="Info" size={16} className="text-blue-600" />
            –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
          </p>
          <ol className="list-decimal list-inside space-y-1 text-muted-foreground ml-6">
            <li>–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω Excel —Å –≤–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏</li>
            <li>–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∏ "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2" –∏ —Ç.–¥.</li>
            <li>–¢–æ–≤–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</li>
            <li>–ù–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º</li>
            <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ</li>
          </ol>
        </div>

        <div className="space-y-3">
          <Button 
            variant="outline" 
            onClick={downloadTemplate}
            className="w-full"
          >
            <Icon name="Download" size={16} className="mr-2" />
            –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏
          </Button>

          <div>
            <Label htmlFor="image-import">–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª</Label>
            <Input
              id="image-import"
              type="file"
              accept=".xlsx,.xls"
              onChange={handleFileUpload}
              disabled={isProcessing}
              className="mt-1"
            />
            <p className="text-xs text-muted-foreground mt-1">
              –§–æ—Ä–º–∞—Ç—ã: Excel (.xlsx, .xls)
            </p>
          </div>
        </div>

        {isProcessing && (
          <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
            <Icon name="Loader2" size={16} className="animate-spin" />
            –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default BulkImageImport;