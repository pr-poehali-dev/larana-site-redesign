'''
Business: –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –≤ –≤—ã–±–æ—Ä–µ –º–µ–±–µ–ª–∏ (YandexGPT)
Args: event - dict —Å httpMethod, body, queryStringParameters
      context - –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏: request_id, function_name
Returns: HTTP response dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
'''
import json
import os
import requests
from typing import Dict, Any, List

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body_data = json.loads(event.get('body', '{}'))
    messages: List[Dict[str, str]] = body_data.get('messages', [])
    products: List[Dict[str, Any]] = body_data.get('products', [])
    
    if not messages:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Messages required'})
        }
    
    api_key = os.environ.get('YANDEX_API_KEY')
    folder_id = os.environ.get('YANDEX_FOLDER_ID')
    
    print(f'API Key present: {bool(api_key)}, Folder ID present: {bool(folder_id)}')
    
    if not api_key or not folder_id:
        print(f'Missing credentials - API Key: {bool(api_key)}, Folder ID: {bool(folder_id)}')
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'YandexGPT API not configured'})
        }
    
    products_info = ""
    if products:
        products_info = "\n\n–¢–û–í–ê–†–´ –í –ö–ê–¢–ê–õ–û–ì–ï:\n"
        for p in products[:20]:
            products_info += f"- {p.get('title', 'N/A')} ({p.get('category', 'N/A')}) - {p.get('price', 'N/A')}"
            if p.get('inStock') == False:
                products_info += " [–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò]"
            products_info += "\n"
    
    system_prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–µ–±–µ–ª—å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ LARANA –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –ü–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –º–µ–±–µ–ª—å –¥–ª—è –∏—Ö –¥–æ–º–∞
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
- –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –ø–æ–º–µ—â–µ–Ω–∏—è, —Å—Ç–∏–ª–µ, –±—é–¥–∂–µ—Ç–µ
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, —Å–±–æ—Ä–∫–∞, —Ä–∞—Å—Å—Ä–æ—á–∫–∞ 0%
- –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—è –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
- –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: "–¢–æ–≤–∞—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã–π, –º–æ–∂–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è"
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–∞ —Å–∞–π—Ç–µ
- –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:
- –ö—É—Ö–Ω–∏ (–≥–æ—Ç–æ–≤—ã–µ –∏ –Ω–∞ –∑–∞–∫–∞–∑)
- –°–ø–∞–ª—å–Ω–∏ (–∫—Ä–æ–≤–∞—Ç–∏, —Ç—É–º–±—ã, –∫–æ–º–æ–¥—ã)
- –ì–æ—Å—Ç–∏–Ω—ã–µ (—Å—Ç–µ–Ω–∫–∏, —Ç—É–º–±—ã –ø–æ–¥ –¢–í)
- –®–∫–∞—Ñ—ã-–∫—É–ø–µ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏ –∫–æ—Ä–ø—É—Å–Ω—ã–µ)
- –ü—Ä–∏—Ö–æ–∂–∏–µ
- –î–µ—Ç—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ LARANA:
‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
‚úÖ –†–∞—Å—Å—Ä–æ—á–∫–∞ 0% –¥–æ 12 –º–µ—Å—è—Ü–µ–≤ –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç
‚úÖ –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ 18 –º–µ—Å—è—Ü–µ–≤
‚úÖ –ë–æ–ª–µ–µ 1000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å 2015 –≥–æ–¥–∞

–ö–æ–Ω—Ç–∞–∫—Ç—ã:
üìû +7 (343) 290-40-54
üìß info@larana-mebel.ru
üåê larana-mebel.ru

{products_info}

–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–∞–∂:
1. –í—ã—è–≤–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (—á—Ç–æ –Ω—É–∂–Ω–æ, –¥–ª—è –∫–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã)
2. –ü—Ä–µ–¥–ª–æ–∂–∏ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
3. –£–ø–æ–º—è–Ω–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ (–¥–æ—Å—Ç–∞–≤–∫–∞, —Ä–∞—Å—Å—Ä–æ—á–∫–∞)
4. –°–æ–∑–¥–∞–π –æ—â—É—â–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ ("–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä", "–ê–∫—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è")
5. –ü—Ä–∏–≥–ª–∞—Å–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ –∫ –∑–≤–æ–Ω–∫—É

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏."""

    yandex_messages = []
    for msg in messages:
        yandex_messages.append({
            'role': 'user' if msg['role'] == 'user' else 'assistant',
            'text': msg['content']
        })
    
    request_body = {
        'modelUri': f'gpt://{folder_id}/yandexgpt-lite',
        'completionOptions': {
            'stream': False,
            'temperature': 0.7,
            'maxTokens': 500
        },
        'messages': [
            {'role': 'system', 'text': system_prompt}
        ] + yandex_messages
    }
    
    try:
        response = requests.post(
            'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
            headers={
                'Authorization': f'Api-Key {api_key}',
                'Content-Type': 'application/json',
                'x-folder-id': folder_id
            },
            json=request_body,
            timeout=30
        )
        
        if response.status_code != 200:
            print(f'YandexGPT error: {response.status_code} - {response.text}')
            return {
                'statusCode': 500,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'isBase64Encoded': False,
                'body': json.dumps({'error': f'YandexGPT API error: {response.text}'})
            }
        
        result = response.json()
        assistant_message = result['result']['alternatives'][0]['message']['text']
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'isBase64Encoded': False,
            'body': json.dumps({'message': assistant_message})
        }
    except Exception as e:
        print(f'Exception in handler: {str(e)}')
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'isBase64Encoded': False,
            'body': json.dumps({'error': f'Internal error: {str(e)}'})
        }