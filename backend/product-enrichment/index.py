import json
import os
from typing import Dict, Any
import urllib.request
import urllib.parse
import re

def search_product_info(query: str) -> str:
    '''
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –∏ Google
    '''
    try:
        encoded_query = urllib.parse.quote(query)
        
        yandex_url = f'https://yandex.ru/search/?text={encoded_query}+—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏+–æ–ø–∏—Å–∞–Ω–∏–µ'
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        req = urllib.request.Request(yandex_url, headers=headers)
        
        with urllib.request.urlopen(req, timeout=5) as response:
            html = response.read().decode('utf-8', errors='ignore')
            
            snippets = re.findall(r'<div class="OrganicTextContentSpan"[^>]*>(.*?)</div>', html, re.DOTALL)
            
            if snippets:
                info = ' '.join(snippets[:3])
                info = re.sub(r'<[^>]+>', '', info)
                info = info[:500]
                return info
            
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}')
    
    return ''

def generate_description(title: str, supplier_article: str, search_info: str) -> str:
    '''
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    '''
    
    base_benefits = [
        '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å–±–æ—Ä–∫–∏',
        '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–ø–∏—à–µ—Ç—Å—è –≤ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä—å–µ—Ä',
        '–ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å',
        '–ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤ —É—Ö–æ–¥–µ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏'
    ]
    
    if search_info:
        words = search_info.lower()
        
        if any(word in words for word in ['—ç–∫–æ–ª–æ–≥–∏—á–Ω', '—ç–∫–æ', '–Ω–∞—Ç—É—Ä–∞–ª—å–Ω']):
            base_benefits.append('–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
        if any(word in words for word in ['–ø—Ä–æ—á–Ω', '–Ω–∞–¥–µ–∂–Ω', '–¥–æ–ª–≥–æ–≤–µ—á–Ω']):
            base_benefits.append('–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å')
        if any(word in words for word in ['—Å—Ç–∏–ª—å', '–¥–∏–∑–∞–π–Ω', '—ç–ª–µ–≥–∞–Ω—Ç']):
            base_benefits.append('–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥')
        if any(word in words for word in ['—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', '—É–¥–æ–±–Ω', '–ø—Ä–∞–∫—Ç–∏—á–Ω']):
            base_benefits.append('–ü—Ä–æ–¥—É–º–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å')
    
    benefits_text = '\n'.join([f'‚Ä¢ {benefit}' for benefit in base_benefits[:6]])
    
    article_line = f'\n–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_article}' if supplier_article else ''
    
    description = f'''üéØ **{title}** ‚Äî —Å—Ç–∏–ª—å–Ω–æ–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞!

‚ú® **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
{benefits_text}

üì¶ **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**{article_line}

üéÅ –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—é—Ç–Ω–æ–π –∏ —Å—Ç–∏–ª—å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –≤ –≤–∞—à–µ–º –¥–æ–º–µ!

üí∞ –í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞!'''
    
    return description

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    Args: event - dict —Å httpMethod, body (supplierArticle, title)
          context - object —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ request_id, function_name
    Returns: HTTP response —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body_str = event.get('body', '{}')
    if not body_str or body_str == '':
        body_str = '{}'
    
    body_data = json.loads(body_str)
    supplier_article = body_data.get('supplierArticle', '')
    title = body_data.get('title', '')
    
    if not supplier_article and not title:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'}),
            'isBase64Encoded': False
        }
    
    search_query = f'{supplier_article} {title}' if supplier_article else title
    
    search_info = search_product_info(search_query)
    
    description = generate_description(title, supplier_article, search_info)
    
    enriched_data = {
        'description': description,
        'searchInfo': search_info[:200] if search_info else '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    }
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps(enriched_data, ensure_ascii=False),
        'isBase64Encoded': False
    }
