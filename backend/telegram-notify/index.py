'''
Business: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –≤ Telegram
Args: event - dict —Å httpMethod, body (–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞)
      context - –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ request_id, function_name
Returns: HTTP response dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
'''

import json
import os
from typing import Dict, Any
import urllib.request
import urllib.parse

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        print('[ERROR] Telegram credentials not configured')
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Telegram not configured'}),
            'isBase64Encoded': False
        }
    
    body_data = json.loads(event.get('body', '{}'))
    
    request_type = body_data.get('type', 'order')
    
    if request_type == 'consultation':
        name = body_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = body_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        room = body_data.get('room', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        comment = body_data.get('comment', '')
        timestamp = body_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        room_names = {
            'living': '–ì–æ—Å—Ç–∏–Ω–∞—è',
            'bedroom': '–°–ø–∞–ª—å–Ω—è',
            'kitchen': '–ö—É—Ö–Ω—è',
            'hallway': '–ü—Ä–∏—Ö–æ–∂–∞—è',
            'office': '–ö–∞–±–∏–Ω–µ—Ç'
        }
        
        room_name = room_names.get(room, room)
        
        message = f"""üõã <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>

üë§ <b>–ò–º—è:</b> {name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üè† <b>–ö–æ–º–Ω–∞—Ç–∞:</b> {room_name}
üïê <b>–í—Ä–µ–º—è:</b> {timestamp}
"""
        
        if comment:
            message += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{comment}\n"
        
        message += "\n<i>–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å —Å –ø–æ–¥–±–æ—Ä–æ–º –º–µ–±–µ–ª–∏</i>"
        
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        try:
            req = urllib.request.Request(
                telegram_url,
                data=json.dumps(data).encode('utf-8'),
                headers={'Content-Type': 'application/json'}
            )
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                print(f'[SUCCESS] Consultation request sent to Telegram')
                
                return {
                    'statusCode': 200,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({'success': True, 'result': result}),
                    'isBase64Encoded': False
                }
        except Exception as e:
            print(f'[ERROR] Failed to send Telegram notification: {str(e)}')
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': str(e)}),
                'isBase64Encoded': False
            }
    
    if request_type == 'delivery_calculation':
        city = body_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        phone = body_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        comment = body_data.get('comment', '')
        timestamp = body_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        message = f"""üìä <b>–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>

üèô <b>–ì–æ—Ä–æ–¥:</b> {city}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üïê <b>–í—Ä–µ–º—è:</b> {timestamp}
"""
        
        if comment:
            message += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
        
        message += "\n<i>–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω</i>"
        
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        try:
            req = urllib.request.Request(
                telegram_url,
                data=json.dumps(data).encode('utf-8'),
                headers={'Content-Type': 'application/json'}
            )
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                print(f'[SUCCESS] Delivery calculation request sent to Telegram')
                
                return {
                    'statusCode': 200,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({'success': True, 'result': result}),
                    'isBase64Encoded': False
                }
        except Exception as e:
            print(f'[ERROR] Failed to send Telegram notification: {str(e)}')
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': str(e)}),
                'isBase64Encoded': False
            }
    
    if request_type == 'contact_form':
        name = body_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = body_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        msg = body_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        timestamp = body_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        message = f"""üìß <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b>

üë§ <b>–ò–º—è:</b> {name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üïê <b>–í—Ä–µ–º—è:</b> {timestamp}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{msg}
"""
        
        telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        try:
            req = urllib.request.Request(
                telegram_url,
                data=json.dumps(data).encode('utf-8'),
                headers={'Content-Type': 'application/json'}
            )
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode('utf-8'))
                print(f'[SUCCESS] Contact form message sent to Telegram')
                
                return {
                    'statusCode': 200,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps({'success': True, 'result': result}),
                    'isBase64Encoded': False
                }
        except Exception as e:
            print(f'[ERROR] Failed to send Telegram notification: {str(e)}')
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'error': str(e)}),
                'isBase64Encoded': False
            }
    
    order = body_data.get('order', {})
    
    delivery_type_map = {
        'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞',
        'pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑'
    }
    
    payment_type_map = {
        'card': '–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω',
        'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏',
        'card_courier': '–ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É'
    }
    
    delivery_type = delivery_type_map.get(order.get('deliveryType', ''), order.get('deliveryType', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
    payment_type = payment_type_map.get(order.get('paymentType', ''), order.get('paymentType', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
    
    items_text = '\n'.join([
        f"‚Ä¢ {item.get('title', '–¢–æ–≤–∞—Ä')} ‚Äî {item.get('quantity', 1)} —à—Ç √ó {item.get('price', 0)} ‚ÇΩ"
        for item in order.get('items', [])
    ])
    
    address_parts = [order.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')]
    if order.get('apartment'):
        address_parts.append(f"–∫–≤. {order.get('apartment')}")
    if order.get('entrance'):
        address_parts.append(f"–ø–æ–¥—ä–µ–∑–¥ {order.get('entrance')}")
    if order.get('floor'):
        address_parts.append(f"—ç—Ç–∞–∂ {order.get('floor')}")
    if order.get('intercom'):
        address_parts.append(f"–¥–æ–º–æ—Ñ–æ–Ω {order.get('intercom')}")
    
    full_address = ', '.join(address_parts)
    
    message = f"""üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.get('orderNumber', 'N/A')}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìß <b>Email:</b> {order.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üì¶ <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_type}
üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_type}
üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {full_address}

<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
{items_text}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> {order.get('totalAmount', 0)} ‚ÇΩ
"""
    
    if order.get('comment'):
        message += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.get('comment')}"
    
    telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    
    try:
        req = urllib.request.Request(
            telegram_url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            print(f'[SUCCESS] Telegram notification sent for order {order.get("orderNumber")}')
            
            return {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                'body': json.dumps({'success': True, 'result': result}),
                'isBase64Encoded': False
            }
    except Exception as e:
        print(f'[ERROR] Failed to send Telegram notification: {str(e)}')
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': str(e)}),
            'isBase64Encoded': False
        }